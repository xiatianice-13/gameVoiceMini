{"version":3,"file":"initWindows.js","sourceRoot":"","sources":["../../../src/commands/initWindows/initWindows.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n * @format\n */\n\nimport fs from '@react-native-windows/fs';\nimport path from 'path';\nimport chalk from 'chalk';\nimport {glob as globFunc} from 'glob';\nimport _ from 'lodash';\nimport {performance} from 'perf_hooks';\nimport {Ora} from 'ora';\nimport util from 'util';\n\nconst glob = util.promisify(globFunc);\n\nimport {Command, Config} from '@react-native-community/cli-types';\nimport {CodedError, Telemetry} from '@react-native-windows/telemetry';\n\nimport {\n  newSpinner,\n  setExitProcessWithError,\n} from '../../utils/commandWithProgress';\nimport * as pathHelpers from '../../utils/pathHelpers';\nimport {\n  getDefaultOptions,\n  startTelemetrySession,\n  endTelemetrySession,\n} from '../../utils/telemetryHelpers';\nimport {copyAndReplaceWithChangedCallback} from '../../generator-common';\nimport {InitOptions, initOptions} from './initWindowsOptions';\n\nexport interface TemplateFileMapping {\n  from: string;\n  to: string;\n  replacements?: Record<string, any>;\n}\n\nexport interface InitWindowsTemplateConfig {\n  name: string;\n  description: string;\n  isDefault?: boolean;\n  preInstall?: (config: Config, options: InitOptions) => Promise<void>;\n  getFileMappings?: (\n    config: Config,\n    options: InitOptions,\n  ) => Promise<TemplateFileMapping[]>;\n  postInstall?: (config: Config, options: InitOptions) => Promise<void>;\n}\n\nexport class InitWindows {\n  protected readonly rnwPath: string;\n  protected readonly templates: Map<string, InitWindowsTemplateConfig> =\n    new Map();\n\n  constructor(readonly config: Config, readonly options: InitOptions) {\n    this.rnwPath = pathHelpers.resolveRnwRoot(this.config.root);\n  }\n\n  protected verboseMessage(message: any) {\n    verboseMessage(message, !!this.options.logging);\n  }\n\n  protected async loadTemplates() {\n    const templatesRoot = path.join(this.rnwPath, 'templates');\n    for (const file of await glob('**/template.config.js', {\n      cwd: templatesRoot,\n    })) {\n      const templateName = path.dirname(file).replace('\\\\', '/');\n      const templateConfig: InitWindowsTemplateConfig = require(path.join(\n        templatesRoot,\n        file,\n      ));\n      this.templates.set(templateName, templateConfig);\n    }\n    if (this.templates.size === 0) {\n      throw new CodedError(\n        'NoTemplatesFound',\n        `No templates were found in ${templatesRoot}.`,\n      );\n    }\n  }\n\n  protected getDefaultTemplateName(): string {\n    for (const [name, config] of this.templates) {\n      if (config.isDefault) {\n        return name;\n      }\n    }\n    throw new CodedError(\n      'NoDefaultTemplate',\n      'No template specified and no default template found.',\n    );\n  }\n\n  protected pascalCase(str: string): string {\n    const camelCase = _.camelCase(str);\n    return camelCase[0].toUpperCase() + camelCase.substr(1);\n  }\n\n  protected isValidProjectName(name: string): boolean {\n    if (name.match(/^[a-z][a-z0-9]*$/gi)) {\n      return true;\n    }\n    return false;\n  }\n\n  protected getReactNativeProjectName(projectDir: string): string {\n    this.verboseMessage('Looking for project name in package.json...');\n    const pkgJsonPath = path.join(projectDir, 'package.json');\n    if (!fs.existsSync(pkgJsonPath)) {\n      throw new CodedError(\n        'NoPackageJson',\n        'Unable to find package.json. This should be run from within an existing react-native project.',\n      );\n    }\n    type PackageJson = {name: string};\n\n    let name = fs.readJsonFileSync<PackageJson>(pkgJsonPath).name;\n    if (!name) {\n      const appJsonPath = path.join(projectDir, 'app.json');\n      if (fs.existsSync(appJsonPath)) {\n        this.verboseMessage('Looking for project name in app.json...');\n        name = fs.readJsonFileSync<PackageJson>(pkgJsonPath).name;\n      }\n    }\n\n    if (!name) {\n      throw new CodedError(\n        'NoProjectName',\n        'Please specify name in package.json or app.json',\n      );\n    }\n\n    return name;\n  }\n\n  public async run(spinner: Ora) {\n    await this.loadTemplates();\n\n    spinner.info();\n\n    this.options.template ??= this.getDefaultTemplateName();\n\n    spinner.info(`Using template '${this.options.template}'...`);\n    if (!this.templates.has(this.options.template.replace('\\\\', '/'))) {\n      throw new CodedError(\n        'InvalidTemplateName',\n        `Unable to find template '${this.options.template}'.`,\n      );\n    }\n    const templateConfig = this.templates.get(this.options.template)!;\n\n    if (this.options.name && !this.isValidProjectName(this.options.name)) {\n      throw new CodedError(\n        'InvalidProjectName',\n        `The specified name is not a valid identifier`,\n      );\n    }\n\n    if (!this.options.name) {\n      const projectName = this.getReactNativeProjectName(this.config.root);\n      this.options.name = this.isValidProjectName(projectName)\n        ? projectName\n        : this.pascalCase(projectName);\n    }\n\n    this.options.namespace ??= this.options.name;\n\n    if (templateConfig.preInstall) {\n      spinner.info(`Running ${this.options.template} preInstall()...`);\n      await templateConfig.preInstall(this.config, this.options);\n    }\n\n    // Get template files to copy and copy if available\n    if (templateConfig.getFileMappings) {\n      const fileMappings = await templateConfig.getFileMappings(\n        this.config,\n        this.options,\n      );\n\n      for (const fileMapping of fileMappings) {\n        const targetDir = path.join(\n          this.config.root,\n          path.dirname(fileMapping.to),\n        );\n\n        if (!(await fs.exists(targetDir))) {\n          await fs.mkdir(targetDir, {recursive: true});\n        }\n\n        await copyAndReplaceWithChangedCallback(\n          fileMapping.from,\n          this.config.root,\n          fileMapping.to,\n          fileMapping.replacements,\n          this.options.overwrite,\n        );\n      }\n    }\n\n    if (templateConfig.postInstall) {\n      spinner.info(`Running ${this.options.template} postInstall()...`);\n      await templateConfig.postInstall(this.config, this.options);\n    }\n\n    spinner.succeed();\n  }\n}\n\n/**\n * Logs the given message if verbose is True.\n * @param message The message to log.\n * @param verbose Whether or not verbose logging is enabled.\n */\nfunction verboseMessage(message: any, verbose?: boolean) {\n  if (verbose) {\n    console.log(message);\n  }\n}\n\n/**\n * Sanitizes the given option for telemetry.\n * @param key The key of the option.\n * @param value The unsanitized value of the option.\n * @returns The sanitized value of the option.\n */\nfunction optionSanitizer(key: keyof InitOptions, value: any): any {\n  // Do not add a default case here.\n  // Strings risking PII should just return true if present, false otherwise.\n  // All others should return the value (or false if undefined).\n  switch (key) {\n    case 'name':\n    case 'namespace':\n      return value === undefined ? false : true; // Strip PII\n    case 'logging':\n    case 'template':\n    case 'overwrite':\n    case 'telemetry':\n      return value === undefined ? false : value; // Return value\n  }\n}\n\n/**\n * Get the extra props to add to the `init-windows` telemetry event.\n * @returns The extra props.\n */\nasync function getExtraProps(): Promise<Record<string, any>> {\n  const extraProps: Record<string, any> = {};\n  return extraProps;\n}\n\n/**\n * The function run when calling `react-native init-windows`.\n * @param args Unprocessed args passed from react-native CLI.\n * @param config Config passed from react-native CLI.\n * @param options Options passed from react-native CLI.\n */\nasync function initWindows(\n  args: string[],\n  config: Config,\n  options: InitOptions,\n) {\n  await startTelemetrySession(\n    'init-windows',\n    config,\n    options,\n    getDefaultOptions(config, initOptions),\n    optionSanitizer,\n  );\n\n  let initWindowsError: Error | undefined;\n  try {\n    await initWindowsInternal(args, config, options);\n  } catch (ex) {\n    initWindowsError =\n      ex instanceof Error ? (ex as Error) : new Error(String(ex));\n    Telemetry.trackException(initWindowsError);\n  }\n\n  await endTelemetrySession(initWindowsError, getExtraProps);\n  setExitProcessWithError(options.logging, initWindowsError);\n}\n\n/**\n * Initializes a new RNW project from a given template.\n * @param args Unprocessed args passed from react-native CLI.\n * @param config Config passed from react-native CLI.\n * @param options Options passed from react-native CLI.\n */\nexport async function initWindowsInternal(\n  args: string[],\n  config: Config,\n  options: InitOptions,\n) {\n  const startTime = performance.now();\n  const spinner = newSpinner('Running init-windows...');\n  try {\n    const codegen = new InitWindows(config, options);\n    await codegen.run(spinner);\n    const endTime = performance.now();\n\n    console.log(\n      `${chalk.green('Success:')} init-windows completed. (${Math.round(\n        endTime - startTime,\n      )}ms)`,\n    );\n  } catch (e) {\n    spinner.fail();\n    const endTime = performance.now();\n    console.log(\n      `${chalk.red('Error:')} ${(e as any).toString()}. (${Math.round(\n        endTime - startTime,\n      )}ms)`,\n    );\n    throw e;\n  }\n}\n\n/**\n * Initializes a new RNW project from a given template.\n */\nexport const initCommand: Command = {\n  name: 'init-windows',\n  description: 'Initializes a new RNW project from a given template.',\n  func: initWindows,\n  options: initOptions,\n};\n"]}