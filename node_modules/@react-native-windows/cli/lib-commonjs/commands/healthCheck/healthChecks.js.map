{"version":3,"file":"healthChecks.js","sourceRoot":"","sources":["../../../src/commands/healthCheck/healthChecks.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n * @format\n */\n\nimport path from 'path';\n\nimport * as pathHelpers from '../../utils/pathHelpers';\n\nconst rnDir = pathHelpers.resolveRnRoot(process.cwd());\nconst cliDir = pathHelpers.resolveRnCliRoot(rnDir);\n\nconst execaPath = require.resolve('execa', {paths: [cliDir]});\nconst execa = require(execaPath);\n\nimport type {\n  HealthCheckCategory,\n  HealthCheckInterface,\n} from '@react-native-community/cli-doctor/build/types';\nimport {powershell} from '../../utils/commandWithProgress';\nimport {HealthCheckList} from './healthCheckList';\n\nexport function getHealthChecks(): HealthCheckCategory[] | undefined {\n  // #8471: There are known cases where the dependencies script will error out.\n  // Fail gracefully if that happens in the meantime.\n  try {\n    return getHealthChecksUnsafe();\n  } catch {\n    return [\n      {\n        label: 'Windows',\n        healthchecks: [\n          {\n            label: 'Failed to enumerate health checks',\n            description: 'Failed to enumerate health checks',\n            getDiagnostics: async () => ({needsToBeFixed: true}),\n            runAutomaticFix: async ({loader}) => {\n              loader.fail();\n            },\n          },\n        ],\n      },\n    ];\n  }\n}\n\nfunction getHealthChecksUnsafe(): HealthCheckCategory[] | undefined {\n  // All our health checks are windows only...\n  if (process.platform !== 'win32') {\n    return undefined;\n  }\n\n  const rnwDepScriptPath = path.join(\n    pathHelpers.resolveRnwRoot(process.cwd()),\n    'Scripts/rnw-dependencies.ps1',\n  );\n\n  return [\n    {\n      label: 'Windows',\n      healthchecks: HealthCheckList.map((dep: [boolean, string, string]) => {\n        const [optional, id, name] = dep;\n        return {\n          label: name,\n          description: name,\n          // The schema check of react-native doctor requires this to be a string, although it should be a boolean\n          // Enable this once we pick up a new version of the CLI that includes https://github.com/react-native-community/cli/pull/1367\n          isRequired: optional,\n          getDiagnostics: async () => {\n            let needsToBeFixed = true;\n            try {\n              await execa(\n                `\"${powershell}\" -ExecutionPolicy Unrestricted -NoProfile \"${rnwDepScriptPath}\" -NoPrompt -Check ${id}`,\n              );\n              needsToBeFixed = false;\n            } catch {}\n            return {\n              needsToBeFixed,\n            };\n          },\n          runAutomaticFix: async ({loader, logManualInstallation}) => {\n            const command = `${powershell} -ExecutionPolicy Unrestricted -NoProfile \"${rnwDepScriptPath}\" -Check ${id}`;\n            try {\n              const {exitCode} = await execa(command, {stdio: 'inherit'});\n              if (exitCode) {\n                logManualInstallation({\n                  command,\n                  healthcheck: `react-native-windows dependency \"${id}\"`,\n                });\n                loader.fail();\n              } else {\n                loader.succeed();\n              }\n            } catch {\n              logManualInstallation({\n                command,\n                healthcheck: `react-native-windows dependency \"${id}\"`,\n              });\n              loader.fail();\n            }\n          },\n        } as HealthCheckInterface;\n      }),\n    },\n  ];\n}\n"]}