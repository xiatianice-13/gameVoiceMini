{"version":3,"file":"initWindows.test.js","sourceRoot":"","sources":["../../src/e2etest/initWindows.test.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;AAEH,+DAA0E;AAE1E,mFAGoD;AAEpD,SAAS,kBAAkB,CACzB,IAAY,EACZ,UAA6B;IAE7B,yEAAyE;IACzE,QAAQ,UAAU,EAAE;QAClB,KAAK,SAAS,CAAC;QACf,KAAK,UAAU,CAAC;QAChB,KAAK,MAAM,CAAC;QACZ,KAAK,WAAW,CAAC;QACjB,KAAK,WAAW,CAAC;QACjB,KAAK,WAAW;YACd,OAAO,IAAI,CAAC;KACf;IACD,MAAM,IAAI,KAAK,CACb,kBAAkB,UAAU,cAAc,IAAI,mBAAmB,CAClE,CAAC;AACJ,CAAC;AAED,IAAI,CAAC,gCAAgC,EAAE,GAAG,EAAE;IAC1C,KAAK,MAAM,aAAa,IAAI,gCAAW,EAAE;QACvC,iBAAiB;QACjB,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QAC1C,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvD,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;QAE3D,oBAAoB;QACpB,IACE,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC;YACzC,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,EACzC;YACA,gFAAgF;YAChF,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,CAAC;SAC/C;QAED,uBAAuB;QACvB,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QACjD,MAAM,CAAC,aAAa,CAAC,WAAY,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,WAAY,CAAC,IAAI,EAAE,CAAC,CAAC;QAE3E,0DAA0D;QAC1D,MAAM,UAAU,GAAG,IAAA,qCAAyB,EAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QACjE,MAAM,CACJ,kBAAkB,CAAC,aAAa,CAAC,IAAI,EAAE,UAA+B,CAAC,CACxE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACd;AACH,CAAC,CAAC,CAAC","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n * @format\n */\n\nimport {commanderNameToOptionName} from '@react-native-windows/telemetry';\n\nimport {\n  initOptions,\n  InitOptions,\n} from '../commands/initWindows/initWindowsOptions';\n\nfunction validateOptionName(\n  name: string,\n  optionName: keyof InitOptions,\n): boolean {\n  // Do not add a default case here. Every item must explicitly return true\n  switch (optionName) {\n    case 'logging':\n    case 'template':\n    case 'name':\n    case 'namespace':\n    case 'overwrite':\n    case 'telemetry':\n      return true;\n  }\n  throw new Error(\n    `Unable to find ${optionName} to match '${name}' in InitOptions.`,\n  );\n}\n\ntest('initOptions - validate options', () => {\n  for (const commandOption of initOptions) {\n    // Validate names\n    expect(commandOption.name).not.toBeNull();\n    expect(commandOption.name.startsWith('--')).toBe(true);\n    expect(commandOption.name).toBe(commandOption.name.trim());\n\n    // Validate defaults\n    if (\n      !commandOption.name.endsWith(' [string]') &&\n      !commandOption.name.endsWith(' [number]')\n    ) {\n      // Commander ignores defaults for flags, so leave undefined to prevent confusion\n      expect(commandOption.default).toBeUndefined();\n    }\n\n    // Validate description\n    expect(commandOption.description).not.toBeNull();\n    expect(commandOption.description!).toBe(commandOption.description!.trim());\n\n    // Validate all command options are present in InitOptions\n    const optionName = commanderNameToOptionName(commandOption.name);\n    expect(\n      validateOptionName(commandOption.name, optionName as keyof InitOptions),\n    ).toBe(true);\n  }\n});\n"]}