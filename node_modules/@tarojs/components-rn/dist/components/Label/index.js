/**
 * âœ˜ for
 */
import * as React from 'react';
import View from '../View';
class _Label extends React.Component {
    constructor() {
        super(...arguments);
        this.hadFoundValidWidget = false;
        this.$validWidget = null;
        this.findValidWidget = (children) => {
            if (this.hadFoundValidWidget)
                return children;
            return React.Children.toArray(children).map((child) => {
                if (!child.type)
                    return child;
                const childTypeName = child.type.displayName;
                if (!this.hadFoundValidWidget &&
                    (childTypeName === '_Checkbox' ||
                        childTypeName === '_Button' ||
                        childTypeName === '_Radio' ||
                        childTypeName === '_Switch')) {
                    this.hadFoundValidWidget = true;
                    return React.cloneElement(child, Object.assign(Object.assign({}, child.props), { ref: (vw) => {
                            this.$validWidget = vw;
                        } }), child.props.children);
                }
                return React.cloneElement(child, Object.assign({}, child.props), this.findValidWidget(child.props.children));
            });
        };
        this.onPress = () => {
            var _a, _b;
            this.$validWidget && ((_b = (_a = this.$validWidget)._simulateNativePress) === null || _b === void 0 ? void 0 : _b.call(_a));
        };
    }
    render() {
        const { children, style } = this.props;
        const mapChildren = this.findValidWidget(children);
        // Prepare for next rerender
        this.hadFoundValidWidget = false;
        return (React.createElement(View, { onClick: this.onPress, style: style }, mapChildren));
    }
}
export default _Label;
//# sourceMappingURL=index.js.map