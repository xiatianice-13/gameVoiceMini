var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Camera, CameraView, PermissionStatus } from 'expo-camera';
import { CameraType } from 'expo-camera/build/legacy/Camera.types';
import React, { Component } from 'react';
import Text from '../Text';
import View from '../View';
import styles from './styles';
export class _Camera extends Component {
    constructor(props) {
        super(props);
        this.expoCameraRef = React.createRef();
        this.onError = (event) => {
            this.props.onError && this.props.onError(event);
        };
        this.onInitDone = () => {
            global._taroCamera = this.expoCameraRef && this.expoCameraRef.current;
            const event = {};
            this.props.onInitDone && this.props.onInitDone(event);
        };
        this.onScanCode = (event) => {
            const { data } = event;
            this.props.onScanCode && this.props.onScanCode(Object.assign({ detail: {
                    result: data
                } }, event));
        };
        this.state = {
            hasPermission: null,
        };
    }
    componentDidMount() {
        return __awaiter(this, void 0, void 0, function* () {
            const permission = yield Camera.requestCameraPermissionsAsync();
            this.setState({
                hasPermission: (permission === null || permission === void 0 ? void 0 : permission.status) === PermissionStatus.GRANTED
            });
        });
    }
    render() {
        const { hasPermission } = this.state;
        const { devicePosition, style, mode, flash } = this.props;
        const type = !devicePosition ? CameraType.front : CameraType[devicePosition];
        if (hasPermission === null) {
            return React.createElement(View, null);
        }
        if (hasPermission === false) {
            return React.createElement(Text, null, "No access to camera");
        }
        const barCodeScannerSettings = mode === 'scanCode'
            ? {
                barCodeScannerSettings: {
                    barCodeTypes: ['qr']
                },
                onBarCodeScanned: this.onScanCode
            }
            : {};
        return (React.createElement(CameraView, Object.assign({ ref: this.expoCameraRef, facing: type, flash: flash, onMountError: this.onError, onCameraReady: this.onInitDone }, barCodeScannerSettings, { style: [styles.camera, style] })));
    }
}
export default _Camera;
//# sourceMappingURL=index.js.map