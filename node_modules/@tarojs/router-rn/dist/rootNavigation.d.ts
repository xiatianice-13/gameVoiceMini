import { NavigationContainerRef } from '@react-navigation/native';
import * as React from 'react';
import { BaseOption, CallbackResult } from './utils/types';
type NavigateMethod = 'navigateTo' | 'redirectTo' | 'navigateBack' | 'switchTab' | 'reLaunch';
interface NavigateOption extends BaseOption {
    url: string;
    events?: Record<string, any>;
}
interface NavigateBackOption extends BaseOption {
    delta?: number;
}
interface NavigateRef extends NavigationContainerRef<ReactNavigation.RootParamList> {
    setOptions: (obj: any) => void;
    navigateConfig: (obj: any) => void;
}
export declare const navigationRef: React.RefObject<NavigateRef>;
export declare function navigateTo(option: NavigateOption): Promise<CallbackResult>;
export declare function redirectTo(option: NavigateOption): Promise<CallbackResult>;
export declare function navigateBack(option?: NavigateBackOption): Promise<CallbackResult>;
export declare function switchTab(option: NavigateOption): Promise<CallbackResult>;
export declare function reLaunch(option: NavigateOption): Promise<CallbackResult>;
export declare function navigate(option: NavigateOption | NavigateBackOption, method: NavigateMethod): Promise<CallbackResult>;
export declare function isTabPage(path?: string): boolean;
export declare function getCurrentRoute(): string[];
export declare const getRouteEventChannel: (routeChannel: any) => void;
export {};
