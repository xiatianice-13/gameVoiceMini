var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { CameraRoll } from '@react-native-camera-roll/camera-roll';
import { Camera } from 'expo-camera';
import { launchCameraAsync, launchImageLibraryAsync, MediaTypeOptions, requestMediaLibraryPermissionsAsync, } from 'expo-image-picker';
import { errorHandler, successHandler } from '../utils';
import { showActionSheet } from './showActionSheet';
export const MEDIA_TYPE = MediaTypeOptions;
export function saveMedia(opts, type, API) {
    return __awaiter(this, void 0, void 0, function* () {
        const { filePath, success, fail, complete } = opts;
        const { granted } = yield requestMediaLibraryPermissionsAsync();
        if (!granted) {
            const res = { errMsg: 'Permissions denied!' };
            return errorHandler(fail, complete)(res);
        }
        const res = { errMsg: `${API}:ok` };
        const saveType = (type === 'video' || type === 'photo') ? type : 'auto';
        try {
            const url = yield CameraRoll.save(filePath, { type: saveType });
            res.path = url;
            return successHandler(success, complete)(res);
        }
        catch (err) {
            res.errMsg = err.message;
            return errorHandler(fail, complete)(res);
        }
    });
}
function showPicker(opts, mediaTypes) {
    return __awaiter(this, void 0, void 0, function* () {
        const { fail, complete } = opts;
        try {
            const res = yield showActionSheet({
                itemList: ['拍摄', '从手机相册选择'],
            });
            if (res.tapIndex === 0) {
                return _chooseMedia(Object.assign(Object.assign({}, opts), { sourceType: ['camera'] }), mediaTypes);
            }
            if (res.tapIndex === 1) {
                return _chooseMedia(Object.assign(Object.assign({}, opts), { sourceType: ['album'] }), mediaTypes);
            }
        }
        catch (err) {
            const res = {
                errMsg: `choose${mediaTypes === MediaTypeOptions.Images ? 'Image' : mediaTypes === MediaTypeOptions.Videos ? 'Video' : 'Media'} fail`
            };
            fail === null || fail === void 0 ? void 0 : fail(res);
            complete === null || complete === void 0 ? void 0 : complete(res);
        }
    });
}
export function chooseMedia() {
    return __awaiter(this, arguments, void 0, function* (opts = {}, mediaTypes) {
        const { sourceType = ['album', 'camera'], } = opts;
        if ((sourceType === null || sourceType === void 0 ? void 0 : sourceType.includes('camera')) && (sourceType === null || sourceType === void 0 ? void 0 : sourceType.includes('album'))) {
            return showPicker(opts, mediaTypes);
        }
        else if (sourceType === null || sourceType === void 0 ? void 0 : sourceType.includes('camera')) {
            return _chooseMedia(Object.assign(Object.assign({}, opts), { sourceType: ['camera'] }), mediaTypes);
        }
        return _chooseMedia(Object.assign(Object.assign({}, opts), { sourceType: ['album'] }), mediaTypes);
    });
}
export function _chooseMedia() {
    return __awaiter(this, arguments, void 0, function* (opts = {}, mediaTypes) {
        var _a, _b, _c;
        const { sizeType = [], sourceType = [], success, fail, complete, maxDuration, count = (mediaTypes === MEDIA_TYPE.Videos ? 1 : 9), compressed } = opts;
        const options = {
            mediaTypes,
            quality: (sizeType[0] === 'compressed' || compressed) ? 0.7 : 1,
            videoMaxDuration: maxDuration,
            allowsMultipleSelection: count > 1,
            selectionLimit: count,
        };
        const messString = mediaTypes === MediaTypeOptions.Images ? 'Image' : mediaTypes === MediaTypeOptions.Videos ? 'Video' : 'Media';
        const isCamera = sourceType[0] === 'camera';
        const { granted } = isCamera ? yield Camera.requestCameraPermissionsAsync() : yield requestMediaLibraryPermissionsAsync();
        if (!granted) {
            const res = { errMsg: 'Permissions denied!' };
            return errorHandler(fail, complete)(res);
        }
        const launchMediaAsync = isCamera ? launchCameraAsync : launchImageLibraryAsync;
        try {
            const resp = yield launchMediaAsync(options);
            let res = {};
            if (mediaTypes === MEDIA_TYPE.Videos) {
                const asset = (_a = resp.assets) === null || _a === void 0 ? void 0 : _a[0];
                res = Object.assign(Object.assign({}, asset), { tempFilePath: asset === null || asset === void 0 ? void 0 : asset.uri, size: asset === null || asset === void 0 ? void 0 : asset.fileSize });
            }
            else {
                res = {
                    tempFilePaths: (_b = resp.assets) === null || _b === void 0 ? void 0 : _b.map((item) => item.uri),
                    tempFiles: (_c = resp.assets) === null || _c === void 0 ? void 0 : _c.map((item) => {
                        var _a;
                        return (Object.assign(Object.assign({}, item), { path: item.uri, size: item.fileSize, type: item.mimeType, fileType: ((_a = item.mimeType) === null || _a === void 0 ? void 0 : _a.startsWith('video')) ? 'video' : 'image' }));
                    })
                };
            }
            if (res.tempFilePath || (!!res.tempFilePaths && res.tempFilePaths.length > 0)) {
                return successHandler(success, complete)(res);
            }
            else {
                const res = {
                    errMsg: `choose${messString}:fail cancel`
                };
                return errorHandler(fail, complete)(res);
            }
        }
        catch (err) {
            const res = {
                errMsg: `choose${messString}:fail`,
                err
            };
            return errorHandler(fail, complete)(res);
        }
    });
}
//# sourceMappingURL=media.js.map